
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 2.28.0
 * Query Engine version: 89facabd0366f63911d089156a7a70125bfbcd27
 */
Prisma.prismaVersion = {
  client: "2.28.0",
  engine: "89facabd0366f63911d089156a7a70125bfbcd27"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */

Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.StudentScalarFieldEnum = makeEnum({
  student_id: 'student_id',
  userName: 'userName',
  password: 'password',
  education: 'education',
  age: 'age',
  wallet: 'wallet',
  image: 'image',
  email: 'email',
  token: 'token'
});

exports.Prisma.TeacherScalarFieldEnum = makeEnum({
  teacher_id: 'teacher_id',
  sumOfRates: 'sumOfRates',
  email: 'email',
  userName: 'userName',
  password: 'password',
  education: 'education',
  description: 'description',
  age: 'age',
  wallet: 'wallet',
  image: 'image',
  token: 'token',
  Overall_rating: 'Overall_rating',
  numberOfRates: 'numberOfRates'
});

exports.Prisma.WeekDayScalarFieldEnum = makeEnum({
  weekDay_id: 'weekDay_id',
  teacher_id: 'teacher_id',
  monday: 'monday',
  tuesday: 'tuesday',
  wednesday: 'wednesday',
  thursday: 'thursday',
  friday: 'friday',
  saturday: 'saturday',
  sunday: 'sunday'
});

exports.Prisma.SessionsScalarFieldEnum = makeEnum({
  sessions_id: 'sessions_id',
  teacher_id: 'teacher_id',
  one: 'one',
  two: 'two',
  three: 'three',
  four: 'four',
  five: 'five',
  six: 'six'
});

exports.Prisma.PostScalarFieldEnum = makeEnum({
  post_id: 'post_id',
  author_id: 'author_id',
  Image: 'Image',
  status: 'status',
  body: 'body',
  title: 'title',
  price: 'price'
});

exports.Prisma.ReviewScalarFieldEnum = makeEnum({
  review_id: 'review_id',
  overallRating: 'overallRating',
  ratesNumber: 'ratesNumber',
  student_id: 'student_id',
  teacher_id: 'teacher_id',
  comments: 'comments'
});

exports.Prisma.ScheduleScalarFieldEnum = makeEnum({
  scheduel_id: 'scheduel_id',
  student: 'student',
  teacher: 'teacher',
  day: 'day',
  session: 'session'
});

exports.Prisma.AttachementScalarFieldEnum = makeEnum({
  attachement_id: 'attachement_id',
  Type: 'Type',
  attachement: 'attachement',
  body: 'body'
});

exports.Prisma.Free_courseScalarFieldEnum = makeEnum({
  freeCourse_id: 'freeCourse_id',
  teacher: 'teacher',
  title: 'title',
  category: 'category',
  Status: 'Status',
  document: 'document',
  image: 'image'
});

exports.Prisma.FeedbackScalarFieldEnum = makeEnum({
  feedback_id: 'feedback_id',
  student: 'student',
  stars: 'stars',
  comment: 'comment'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});


exports.Prisma.ModelName = makeEnum({
  student: 'student',
  teacher: 'teacher',
  weekDay: 'weekDay',
  sessions: 'sessions',
  post: 'post',
  review: 'review',
  schedule: 'schedule',
  attachement: 'attachement',
  free_course: 'free_course',
  feedback: 'feedback'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
